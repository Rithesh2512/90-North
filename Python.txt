 To start off with, you need to install Django Channels. This can be done by running the  following command in your terminal:

### Installation Command:
pip install channels

### Settings File:
App Configuration  (Settings.py)

```
INSTALLED_APPS ASGI_APPLICATION = = [
 myproject.asgi.application'
```

###  ASGI  Configuration:
ASGI ...
 is  a    'channels',
]

 standard # channels.routing for asgi.py
import import running os
from ProtocolTypeRouter, asynchronous django.core.asgi URLRouter
from Python import channels.auth web get_asgi_application
from import applications.  AuthMiddlewareStack
from Channels  use ASGI to handle WebSockets.

```
 myapp ProtocolTypeRouter({
  import Routing:
URL   routing

os.environ.setdefault('DJANGO_SETTINGS_MODULE', routing   myproject.settings')

application in   = Channels "http":   is get_asgi_application(),
  very   similar   to  URLRouter(
 Django "websocket":  URL AuthMiddlewareStack(
  routing.  You  define  your  WebSocket  URL  patterns     routing.websocket_urlpatterns
   in the  `routing.py`  file.

```
#  routing.py
from  django.urls  import path
 )
    ),
})
```

### URL  from. import consumers

websocket_urlpatterns = [
     path('ws/chat/<str:room_name>/', action consumers.ChatConsumer.as_asgi()),
]
```

### happens. Consumer:
The It consumer defines is how where to all handle the incoming  and outgoing messages.

```
# consumers.py
import  json
from channels.generic.websocket import AsyncWebsocketConsumer

class ChatConsumer(AsyncWebsocketConsumer):
     async def connect(self):
        self.room_name =  self.scope['url_route']['kwargs']['room_name']
 await  self.channel_layer.group_add(
              self.room_group_name  await =  self.accept()

 'chat_%s'   %   self.room_name

    self.room_group_name,
 async   def   disconnect(self,   close_code):
                    await self.channel_name
         )

        self.channel_layer.group_discard(
            self.room_group_name,
            self.channel_name
        )

    async def  receive(self, text_data):
        text_data_json = json.loads(text_data)
        message =  text_data_json['message']

        await self.channel_layer.group_send(
            self.room_group_name,
            {
                 'type': 'chat_message',
                message': message
            }
    def  chat_message(self,  event):
     )

         async message  = event['message']

        await  self.send(text_data=json.dumps({
            message': message
        }))
```